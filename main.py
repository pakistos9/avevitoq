import requests, lxml, asyncio,shelve
from bs4 import BeautifulSoup as bs
import asyncio, logging, os
from aiogram import F, Dispatcher, Bot, types
from aiogram.filters import CommandStart, Command
from aiogram.types import BotCommand



prefix = "fRmzq"
secret_id = ["1086225549", "5271211921",]
#=========================================================================
def one_avito_parse(search):
    global prefix
    url = f"https://www.avito.ru/orel?q={search}&s=104"
    text_dict = {}
    new_avito_dict = {} #–Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π

    responce = requests.get(url)
    soup = bs(responce.text, "lxml")
    cards = soup.find_all("div", class_=f"""iva-item-content-{prefix}""")
    for card in cards:
        text = str(card.text)
        link = "https://www.avito.ru" + str(card.find ("a").get("href"))
        text_dict.setdefault(text,link)
        
    if not text_dict:
        return{"—Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç":"–¥–æ–±–∞–≤—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å!!!"}
    
    if os.path.isfile("avito"): # –µ—Å–ª–∏ –∞–≤–∏—Ç–æ —Ñ–∞–∏–ª –µ—Å—Ç—å
        
        shelve_file = shelve.open("avito")
        avito_dict_file = shelve_file["data"]
        
        for el in text_dict:
            if el not in avito_dict_file.keys():
                new_avito_dict.setdefault(el,text_dict[el])
        new_dict = avito_dict_file.copy()
        shelve_file.close()
        new_dict.update(new_avito_dict)
        file = shelve.open("avito")
        file["data"]=new_dict
        file.close()
        return new_avito_dict
    else: # –µ—Å–ª–∏ —Ñ–∞–∏–ª–∞ –Ω–µ—Ç
        file = shelve.open("avito")
        file["data"] = text_dict
        file.close()
        return text_dict
    

        


#Avevitio_Bot
#asyncio.sleep(10) # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω–∞
token = "5588564340:AAFXOO86bIWG5pILzAs0PEqr4sN_PcXrX4I"
menu_comands = [BotCommand (command= "start", description= "–Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"),
                BotCommand(command="about", description= "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç"),
                BotCommand(command= "menu", description= "–≤—ã–∑–æ–≤ –º–µ–Ω—é"),
                BotCommand(command="change_prefix", description="–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å"),]

bot = Bot(token=token)
search = "–æ—Ç–¥–∞–º+–±–µ—Å–ø–ª–∞—Ç–Ω–æ"
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

#async def avito_search(search):
    #await new_avito_dict = new_avito_seils(search)

@dp.message(Command('start'))
async def avito_start(message: types.Message):
    global secret_id
    if str(message.from_user.id) not in secret_id:
        await message.answer(f"{message.from_user.first_name} —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!!! ü§î")
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞!!!\n –≤–∞—à id {message.from_user.id}")
        while True:
            avito_dict = one_avito_parse(search)
            if not avito_dict:
                #print ("–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ")
                pass
         
            else:
                for i in avito_dict:
                    await message.answer(f"{i}\n{avito_dict[i]}")
                    await asyncio.sleep(1)
                
            await asyncio.sleep(900)

#@dp.message(Command("go"))
#async def avito_go(message: types.Message):
#    await message.answer("–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏")
#    while True:
#        new_avito_dict = new_avito_seils(search)

#        if not new_avito_dict:
#            #await message.answer("–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ")
#            await asyncio.sleep(900)
#        else:
#            for i in new_avito_dict:
#                await message.answer(f"{i} \n{new_avito_dict[i]}")
#                await asyncio.sleep(2)
#            await asyncio.sleep(900)
@dp.message(Command("change_prefix"))
async def prefix_question (message: types.Message):
    await message.answer("–Ω–∞–ø–∏—à–∏ –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å")
    @dp.message()
    async def prefix_changer(message: types.Message):
        global prefix
        prefix = message.text
        await message.answer(f"–ø—Ä–µ—Ñ–∏–∫—Å –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ {prefix}")
    
@dp.message(Command("about"))
async def about_funk(message: types.Message):
    await message.answer("–±–æ—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ –∞–≤–∏—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö, –≤ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º –æ–Ω –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏—Å—ã–ª–∞–∏—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ü§ó")

@dp.message(Command("menu"))
async def menu_func (message: types.Message):
    await message.answer("–∑–¥–µ—Å—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ")


async def main():
    await bot.set_my_commands(commands=menu_comands,
        scope = types.BotCommandScopeAllPrivateChats())
    await dp.start_polling(bot)
    

if __name__ == "__main__":
    asyncio.run(main())
