from aiogram import F, Dispatcher, Bot, types, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import BotCommand
import asyncio, os
from aiogram.types import BufferedInputFile

from avito_parce import one_avito_parse, name_avito_parse
from buttons import search_buttons, del_kbd, iron_buttons, stop_button
from iron import Parse_iron
from EXIF_func import meta_get


rt_avito = Router()
go = False
#prefix = "fRmzq"
secret_id = ["1086225549", "5271211921",]
search = "–æ—Ç–¥–∞–º+–±–µ—Å–ø–ª–∞—Ç–Ω–æ"
search_object = ""

@rt_avito.message(Command('start'))
async def avito_start(message: types.Message):
    global search
    global secret_id
    if str(message.from_user.id) not in secret_id: # type: ignore
        await message.answer(f"{message.from_user.first_name} —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!!! ü§î \n –≤–∞—à id {message.from_user.id}") # type: ignore
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞!!!\n –≤–∞—à id {message.from_user.id}") # type: ignore
        while True:
            avito_dict = one_avito_parse(search=search)
            if not avito_dict:
                #print ("–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ")
                pass
         
            else:
                #bot = message.bot #–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ª—å–∑–æ–≤–æ—Ç–µ–ª—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                for i in avito_dict:
                    for user_id in secret_id:
                        await message.bot.send_message(user_id,f"*Ô∏è‚É£–æ—Ç–¥–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ*Ô∏è‚É£ \n{i}\n{avito_dict[i]}") # type: ignore # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —é–∑–µ—Ä –∞–π –¥–∏
                        await asyncio.sleep(1)
                
            await asyncio.sleep(900)
            
            

    
@rt_avito.message(Command("add"))
async def about_funk(message: types.Message):
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü§î \n–≤–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @rt_avito.message(F.text)
    async def add_user(message: types.Message):
        global secret_id
        id = ''
        for simbol in str(message.text):
            if simbol in '1234567890':
                id += simbol
        secret_id.append(id)
        print (secret_id)
        await message.answer(f"id {id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫")

@rt_avito.message(Command("menu"))
async def menu_func (message: types.Message):
    await message.answer("–¥–µ—Ä–∂–∏", reply_markup=search_buttons)
    
 #===================================================================   
@rt_avito.message(F.text == "–ø–æ–∏—Å–∫ –∂–µ–ª–µ–∑–∞")
async def search_iron (message: types.Message):
    await message.answer("–≤—ã–±–µ—Ä–µ—Ç–µ –ø–æ–∏—Å–∫...",reply_markup=iron_buttons)
    
    @rt_avito.message(F.text == "—Å—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã")
    async def search_washing_machin(message: types.Message):
        global secret_id
        await message.answer("–∏—â—É...", reply_markup=del_kbd)
        while True:
            washing_machine = Parse_iron().get_washing_machine()
            for i in washing_machine:
                for u_id in secret_id:
                    await message.bot.send_message(u_id, f"üîµ—Å—Ç–∏—Ä–∞–ª–∫–∏üîµ \n{i}\n{washing_machine[i]}") # type: ignore
                    await asyncio.sleep(1)
            await asyncio.sleep(1000)
                
    
    @rt_avito.message(F.text == "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏")
    async def search_fridge(message: types.Message):
        global secret_id
        await message.answer("–∏—â—É...", reply_markup=del_kbd)
        while True:
            fridges = Parse_iron().get_fridge()
            for i in fridges:
                for u_id in secret_id:
                    await message.bot.send_message(u_id,f"üî∂—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏üî∂ \n{i}\n{fridges[i]}") # type: ignore
                    await asyncio.sleep(1)
            await asyncio.sleep(1000)
    
    @rt_avito.message(F.text == "–≥–∞–∑–æ–≤—ã–µ –ø–ª–∏—Ç—ã")
    async def search_gas(message: types.Message):
        global secret_id
        await message.answer("–∏—â—É...", reply_markup=del_kbd)
        while True:
            gas = Parse_iron().get_gaz()
            for i in gas:
                for u_id in secret_id:
                    await message.bot.send_message(u_id,f"üî∑–≥–∞–∑–æ–≤—ã–µ –ø–ª–∏—Ç—ãüî∑ \n{i}\n{fridges[i]}") # type: ignore
                    await asyncio.sleep(1)
            await asyncio.sleep(1000)

@rt_avito.message(F.text == "–∑–∞–¥–∞—Ç—å –ø–æ–∏—Å–∫")
async def search_other (message: types.Message):
    global go
    if go == False:
        await message.answer("–≤–≤–µ–¥–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏: ", reply_markup=del_kbd)
    else: await message.answer("–æ—Å—Ç–∞–Ω–æ–≤–∏ –ø–æ–∏—Å–∫", reply_markup=stop_button)
    
    @rt_avito.message(F.text)
    async def search_add(message: types.Message):
        global go
        go = True
        global secret_id
        search_object = str(message.text).lower()
        search_object = search_object.split()
        search_object = "+".join(search_object)
        print (search_object)
        while go:
            search_dict = name_avito_parse(search=search_object)
            for k, v in search_dict.items():
                for u_id in secret_id:
                    await message.bot.send_message(u_id,f"üîª –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ üîª \n{k}\n{v}") # type: ignore
                    await asyncio.sleep(1)
            await asyncio.sleep(1000)
                
@rt_avito.message(F.text == "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
async def stop_search(message: types.Message):
    global go
    go = False
    await message.answer("üîÖ–ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!üîÖ")



ALLOWED_MIME_TYPES = {
    'image/jpeg', 'image/png', 
    'image/tiff', 'image/webp'
}

    
@rt_avito.message(F.document & F.document.mime_type.in_(ALLOWED_MIME_TYPES)) 
async def seeq_file_exif (message: types.Message):
    file_id = message.document.file_id # type: ignore
    file = await message.bot.get_file(file_id) # type: ignore
    file_path = f"photo.jpg"
    await message.bot.download_file(file.file_path, destination=file_path) # type: ignore
    meta_data = meta_get()
    for k, v in meta_data.items():
        await message.answer(f" ‚ñ´Ô∏è–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ‚ñ´Ô∏è \n{k} {v}")
        await asyncio.sleep(1)
    
   
#@rt_avito.message(F.photo)
#async def seeq_photo_exif(message: types.Message):
    
#    photo = message.photo[-1] # type: ignore
    
 #   file_info = await message.bot.get_file(photo.file_id) # type: ignore
 #   file_path = f"photo.jpg"
 #   await message.bot.download_file( # type: ignore
#            file_path=file_info.file_path, # type: ignore
#            destination=file_path
#        )
        
    